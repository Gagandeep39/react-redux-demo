{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","store/actions.js","App.js","serviceWorker.js","store/reducers/counter.js","store/reducers/result.js","index.js"],"names":["counterControl","props","className","onClick","clicked","label","counterOutput","value","Counter","state","counter","counterChangedHandler","action","setState","prevState","this","ctr","onIncrementCounter","onDecrementCounter","onAdd","onSubstract","onStoreResult","storedResults","map","result","key","id","onDeleteResult","Component","connect","res","results","dispatch","type","elementId","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","concat","Date","updatedArray","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94fafb44.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","import React, { Component } from 'react';\n\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n//Function that returns a Higher order component we use during component export \nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../store/actions';\n\nclass Counter extends Component {\n    state = {\n        counter: 0\n    }\n\n    counterChangedHandler = ( action, value ) => {\n        switch ( action ) {\n            case 'inc':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + 1 } } )\n                break;\n            case 'dec':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - 1 } } )\n                break;\n            case 'add':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + value } } )\n                break;\n            case 'sub':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - value } } )\n                break;\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <CounterOutput value={this.props.ctr} />\n                <CounterControl label=\"Increment\" clicked={this.props.onIncrementCounter} />\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter}  />\n                <CounterControl label=\"Add 5\" clicked={this.props.onAdd}  />\n                <CounterControl label=\"Subtract 5\" clicked={this.props.onSubstract}  />\n                <hr />\n                <button onClick={()=>this.props.onStoreResult(this.props.ctr)}>Store Result</button>\n                <ul>\n                    { this.props.storedResults.map(result => (\n                        <li key={result.id} onClick={()=>this.props.onDeleteResult(result.id)}> {result.value} </li>\n                    )) \n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n// Store state\nconst mapStateToProps = state => {\n    return {\n        ctr: state.ctr.counter,\n        storedResults: state.res.results\n    };\n}\n\n// Store modification logicc\nconst mapDispatchToProps = dispatch => {\n    return {\n        // Calling this will execute dispatch functin\n        onIncrementCounter: () => {\n            dispatch({type: actionTypes.INCREMENT})\n        },\n        onDecrementCounter: () => {\n            dispatch({type: actionTypes.DECREMENT})\n        },\n        onAdd: () => {\n            dispatch({type: actionTypes.ADD, value: 5})\n        },\n        onSubstract: () => {\n            dispatch({type: actionTypes.SUBSTRACT, value: 5})\n        },\n        onStoreResult: (result) => {\n            // Here we will need to provide the rest as the reducer doesnt have direct access t it\n            dispatch({type: actionTypes.STORE_RESULT, result: result})\n        },\n        onDeleteResult: (id) => {\n            dispatch({type: actionTypes.DELETE_RESULT, elementId: id})\n        }\n    }\n}\n\n// Below line creates a component\n// Takes mapStateToProps as parameter\n// The parameers can then be used as props in the container\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const ADD = 'ADD';\nexport const SUBSTRACT = 'SUB';\nexport const STORE_RESULT = 'STORE_RESULT';\nexport const DELETE_RESULT = 'DELETE_RESULT';\n","import React from 'react';\nimport './App.css';\nimport Counter from './containers/Counter/Counter';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions';\n\nconst initialState = {\n  counter: 0\n}\n\nexport default function counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      // Different from constNewState = state as it creates a clone instead of providing referece\n      // We must always make a copy i.e update objects immutably\n      // const newState = Object.assign({}, state);\n      // newState.counter = state.counter + 1\n      // return newState;\n      // ******* OR *****\n      return {\n        ...state,\n        counter: state.counter + 1\n      }\n    case actionTypes.DECREMENT:\n      return {\n        ...state,\n        counter: state.counter - 1\n      }\n    case actionTypes.ADD:\n      return {\n        ...state,\n        counter: state.counter + action.value\n      }\n    case actionTypes.SUBSTRACT:\n      return {\n        ...state,\n        counter: state.counter -action.value\n      }\n  }\n    return state;\n}\n","import * as actionTypes from '../actions';\n\nconst initialState = {\n  results: []\n}\n\nexport default function resultReducer(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.STORE_RESULT:\n      return {\n        ...state,\n        results: state.results.concat({id: new Date(), value: action.result}) // taking value as param on calling\n        // results: state.results.concat({id: new Date(), value: state.counter}) // Substitue of.push method as this is immutable(Creates copy of array)\n      }\n    case actionTypes.DELETE_RESULT:\n      const updatedArray = state.results.filter(results => results.id != action.elementId)\n      return {\n        ...state,\n        results: updatedArray\n      }\n  }\n    return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\n\n// Cmbining two reducer\n// NOTE: we cannot acces state of other reducer from isnide the reducer\nconst rootReducer = combineReducers({\n  ctr: counterReducer,\n  res: resultReducer\n})\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}